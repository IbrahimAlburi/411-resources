Agile
	•	Theme: Get GiggleGit demo into a stable enough alpha to start onboarding some adventurous clients
	•	Epic: Onboarding experience
User Story 1:
As a vanilla Git power-user that has never seen GiggleGit before, I want to quickly understand the differences between GiggleGit and traditional Git, so I can confidently use it without disrupting my workflow.
	•	Task: Provide clear introductory documentation
	◦	Ticket 1: Create a "GiggleGit vs. Git" comparison table
	▪	Draft a markdown-based table highlighting key differences between GiggleGit and traditional Git commands and workflows.
	◦	Ticket 2: Implement gigglegit help CLI command
	▪	Ensure that running gigglegit help provides an overview of core commands and their usage.
User Story 2:
As a team lead onboarding an experienced GiggleGit user, I want to easily set up new repositories and invite team members, so we can start using GiggleGit collaboratively without friction.
	•	Task: Simplify repository and team management
	◦	Ticket 1: Implement repository creation via CLI
	▪	Add a gigglegit init command that initializes a new repository with essential configuration files.
	◦	Ticket 2: Add a user invitation feature
	▪	Allow team leads to invite users via email or username with role-based access control.
User Story 3:
As a developer trying GiggleGit for the first time, I want an interactive tutorial that guides me through common workflows, so I can learn by doing rather than reading documentation.
	•	Task: Build an onboarding tutorial
	◦	Ticket 1: Create an interactive CLI walkthrough
	▪	Implement a guided tutorial that takes users through committing, merging with memes, and resolving conflicts.
	◦	Ticket 2: Add a "Practice Merge Conflict" simulation
	▪	Provide a safe environment where users can trigger and resolve merge conflicts using GiggleGit’s meme-based approach.
